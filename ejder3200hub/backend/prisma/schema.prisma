// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for PostgreSQL
enum Role {
  Superadmin
  Admin
  Manager
  TeamLead
  Member
}

enum ProjectStatus {
  Active
  Planning
  Completed
}

enum Priority {
  High
  Medium
  Low
}

enum TaskStatus {
  ToDo
  InProgress
  Done
}

enum RsvpStatus {
  Accepted
  Declined
  Pending
}

enum IdeaStatus {
  New
  Evaluating
  Approved
  Archived
}

enum PurchaseRequestStatus {
  Pending
  Approved
  Rejected
}

enum InvoiceStatus {
  Unpaid
  Paid
}

enum VoteStatus {
  Supports
  Neutral
  Opposed
}

enum FeedbackCategory {
  BugReport
  FeatureRequest
  General
}

enum FeedbackStatus {
  Submitted
  InProgress
  Resolved
  Closed
}

model Resource {
  id          String  @id @default(cuid())
  name        String
  email       String  @unique
  role        Role    // Using proper enum for PostgreSQL
  department  String?
  phone       String?
  startDate   String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  managedDepartments Department[] @relation("DepartmentManager")
  assignedTasks      Task[]       @relation("TaskAssignee")
  reportedTasks      Task[]       @relation("TaskReporter")
  managedProjects    Project[]    @relation("ProjectManager")
  authoredIdeas      Idea[]       @relation("IdeaAuthor")
  ledIdeas           Idea[]       @relation("IdeaProjectLeader")
  attendedEvents     EventRsvp[]
  votes              Vote[]
  comments           Comment[]
  feedbacks          Feedback[]

  @@map("resources")
}

model Department {
  id          String  @id @default(cuid())
  name        String
  parentId    String?
  managerId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      Department? @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[] @relation("DepartmentHierarchy")
  manager     Resource?   @relation("DepartmentManager", fields: [managerId], references: [id])

  @@map("departments")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  code        String        @unique
  status      ProjectStatus // Using proper enum
  priority    Priority      // Using proper enum
  startDate   String
  endDate     String
  progress    Int           @default(0)
  managerId   String
  team        String[]      // PostgreSQL supports arrays
  budget      Float
  color       String
  files       String[]      // PostgreSQL supports arrays (default empty)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  manager     Resource @relation("ProjectManager", fields: [managerId], references: [id])
  tasks       Task[]
  events      Event[]
  comments    Comment[]

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus // Using proper enum
  priority    Priority   // Using proper enum
  assigneeId  String
  reporterId  String?
  projectId   String
  startDate   String?
  endDate     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  assignee    Resource @relation("TaskAssignee", fields: [assigneeId], references: [id])
  reporter    Resource? @relation("TaskReporter", fields: [reporterId], references: [id])
  project     Project  @relation(fields: [projectId], references: [id])
  comments    Comment[]

  @@map("tasks")
}

model Idea {
  id                      String     @id @default(cuid())
  name                    String
  status                  IdeaStatus // Using proper enum
  authorId                String
  category                String?
  description             String?
  summary                 String?
  problem                 String?
  problemType             String?
  problemFrequency        String?
  solution                String?
  benefits                String?
  targetAudience          String?
  relatedDepartments      String[]      // PostgreSQL supports arrays (default empty)
  projectLeaderId         String?
  potentialTeam           String[]      // PostgreSQL supports arrays (default empty)
  estimatedDuration       String?
  timelinePhases          Json?      // Using JSON for complex objects
  criticalMilestones      String?
  totalBudget             Float?
  budgetItems             Json?      // Using JSON for complex objects
  expectedRevenueIncrease Float?
  expectedCostSavings     Float?
  expectedROI             Float?
  fundingSources          String?
  revenueSources          String?
  swotStrengths           String?
  swotWeaknesses          String?
  swotOpportunities       String?
  swotThreats             String?
  risks                   String?
  riskLevel               String?
  mitigations             String?
  successCriteria         String?
  files                   String[]      // PostgreSQL supports arrays (default empty)
  tags                    String[]      // PostgreSQL supports arrays (default empty)
  priority                Priority?     // Using proper enum
  creationDate            String?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt

  // Relations
  author                  Resource @relation("IdeaAuthor", fields: [authorId], references: [id])
  projectLeader           Resource? @relation("IdeaProjectLeader", fields: [projectLeaderId], references: [id])
  votes                   Vote[]
  comments                Comment[]

  @@map("ideas")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   String
  endTime     String
  location    String?
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project? @relation(fields: [projectId], references: [id])
  rsvps       EventRsvp[]
  comments    Comment[]

  @@map("events")
}

model EventRsvp {
  id         String     @id @default(cuid())
  eventId    String
  resourceId String
  status     RsvpStatus // Using proper enum
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id])

  @@unique([eventId, resourceId])
  @@map("event_rsvps")
}

model Vote {
  id         String     @id @default(cuid())
  ideaId     String
  resourceId String
  status     VoteStatus // Using proper enum
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  idea       Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id])

  @@unique([ideaId, resourceId])
  @@map("votes")
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  resourceId String
  projectId  String?
  taskId     String?
  ideaId     String?
  eventId    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  resource   Resource @relation(fields: [resourceId], references: [id])
  project    Project? @relation(fields: [projectId], references: [id])
  task       Task?    @relation(fields: [taskId], references: [id])
  idea       Idea?    @relation(fields: [ideaId], references: [id])
  event      Event?   @relation(fields: [eventId], references: [id])

  @@map("comments")
}

model Feedback {
  id          String           @id @default(cuid())
  category    FeedbackCategory // Using proper enum
  status      FeedbackStatus   // Using proper enum
  title       String
  description String
  resourceId  String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  resource    Resource @relation(fields: [resourceId], references: [id])

  @@map("feedbacks")
}

model PurchaseRequest {
  id          String                 @id @default(cuid())
  title       String
  description String?
  amount      Float
  status      PurchaseRequestStatus  // Using proper enum
  requesterId String
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@map("purchase_requests")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  amount        Float
  status        InvoiceStatus // Using proper enum
  dueDate       String
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("invoices")
}